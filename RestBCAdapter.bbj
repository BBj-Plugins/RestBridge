use java.util.HashMap
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow

seterr execerr

debug=0
debug=num(stbl("DEBUG",err=*next),err=*next)

if debug then System.out.println("REST: new remote session ")

BBjAPI().getConfig().setOptionSetting("ERROR_UNWINDS", 1)

ses$ = argv(1)
authtype$=argv(2)
auth$ = argv(3)

if debug then System.out.println("REST: WORKDIR "+dir(""))
ses$=stbl("SESSIONID",ses$)

servletParams! = new HashMap()
servletParams! = BBjAPI().getGlobalNamespace().getValue(ses$+"_SERVLET_PARAMETERS",err=*next)

if debug then System.out.println("Got auth header: "+authtype$+" "+auth$)
authtype$=cvs(authtype$,4)

if authtype$="BASIC" then
  auth$=java.util.Base64.getDecoder().decode(auth$)
  user$=auth$(1,pos(":"=auth$)-1)
  password$=auth$(pos(":"=auth$)+1)
fi

if authtype$="BEARER" then
  jwt$=auth$
fi

authenticated=0

rem changing the string encoding to the server's encoding
user$ = new String(user$,"utf-8").getBytes(info(1,2))
password$ = new String(password$,"utf-8").getBytes(info(1,2))

authpgm$="authenticate.bbj"
if servletParams!.get("REST_AUTHPGM") <> null() then
    authpgm$ = servletParams!.get("REST_AUTHPGM").toString()
endif

call authpgm$

requestSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST_SEM")
responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")

done_login:


timeout=60
if servletParams!.containsKey("REST_TIMEOUT") then
    timeout=num(servletParams!.get("REST_TIMEOUT").toString(),err=*next)
endif

main_loop:

    CLEAR EXCEPT user$, ses$, requestSemaphore!, responseSemaphore!, ses!, authenticated, timeout, usecount, debug, authpgm$, servletParams!


    seterr execerr

    dummy$=STBL("!SESSIONINFO",ses$+" - idle "+str(usecount))

    rem requestSemaphore!.acquire()
    if !requestSemaphore!.tryAcquire(1,timeout,java.util.concurrent.TimeUnit.SECONDS) then
        rem a timeout has occurred while trying to acquire the semaphore

        rem remove the sessions' namespace values
        namespace! = BBjAPI().getGlobalNamespace()
        namespace!.removeValue(ses$+"_REQUEST")
        namespace!.removeValue(ses$+"_RESPONSE")
        namespace!.removeValue(ses$+"_REQUEST_SEM")
        namespace!.removeValue(ses$+"_RESPONSE_SEM")
        namespace!.removeValue(ses$+"_SERVLET_PARAMETERS")

        rem Calling the ON_CLEANUP label to perform possible user defined cleanup operations
        call authpgm$+"::ON_CLEANUP",err=*next        

        release
    fi

    request!=BBjAPI().getGlobalNamespace().getValue(ses$+"_REQUEST")
    if (str(request!) = "PING") then
        responseSemaphore!.release()
        goto main_loop
    fi

    call authpgm$+"::ON_REQUEST",err=*next

    if debug then System.out.println("REST: remote session running "+ses$)
    dummy$=STBL("!SESSIONINFO",ses$+" - working "+str(request!))

    response! = new HashMap()
    params! = new HashMap()

    if request!.get("uri") = null() then
        statuscode=404
        throw "Missing BC",12
    endif

    vec! = request!.get("preferredlocales")
    if vec! <> null() and vec!.size() then
        void$ = stbl("!LOCALE",vec!.getItem(0).getLanguage())
    endif

    uri$=request!.get("uri")
    uri$=uri$(2)
    if pos("/"=uri$)>0
        bc$=uri$(1,pos("/"=uri$)-1)
        uri$=uri$(pos("/"=uri$)+1)
        sel$=uri$
    else
        bc$=uri$
        sel$=""
    fi

    if cvs(bc$,3) = "" then
        statuscode=404
        throw "Missing BC",12
    endif

    ns! = BBjAPI().getNamespace("RestBCAdapter_"+ses$,"BCList",1)
    bcMap! = ns!.getValue("BCMAP",err=*next)
    if bcMap! = null() then
        bcMap! = new HashMap()
        ns!.setValue("BCMAP",bcMap!)
    endif

    if bc$="Token" then
            rs! = new ResultSet()
            token_rec! = new DataRow()
            
            rem token_rec! should be created in the customizable authpgm
            call authpgm$+"::ISSUE_JWT"
            
            rs!.add(token_rec!)
            response!.put("resultset",rs!)
            response!.put("BC","Token")
            response!.put("single",1)    
            goto send_response
    fi


    bc$=bc$+"BC"
    if bcMap!.containsKey(bc$) then
        bc! = bcMap!.get(bc$)
    else
        if servletParams!.containsKey("REST_PGM_PREFIX") then
            prefix$ = servletParams!.get("REST_PGM_PREFIX")
            void$ = stbl("REST_PGM_PREFIX", prefix$)
        endif

        if servletParams!.containsKey("REST_PGM_SUFFIX") then
            suffix$ = servletParams!.get("REST_PGM_SUFFIX")
            void$ = stbl("REST_PGM_SUFFIX", suffix$)
        endif

        bc! = null()
        bc! = eval("new ::"+prefix$+bc$+suffix$+"::"+bc$+"()")
        bcMap!.put(bc$,bc!)
    endif

    rem Determine primary key field(s)
    ar! = bc!.getAttributesRecord()
    it! = ar!.getFieldNames().iterator()
    while it!.hasNext()
        f$=it!.next()
        if ar!.getFieldAttribute(f$,"EDITABLE")="2" then
            filterf$=filterf$+"/"+f$
        fi
    wend
    if filterf$ > "" then
        filterf$ = filterf$(2)
    endif


    method$ = request!.get("method")
    switch method$
        case "POST"
            if request!.get("invoke") <> null() then
                invoke$ = request!.get("invoke")
                dr! = DataRow.fromJson(request!.get("body"))
                if dr! <> null() and dr!.getColumnCount() > 0 then
                    variableNamePrefix! = new String(user$)
                    variableNamePrefix! = variableNamePrefix!.replaceAll("\W", "_")
                    
                    it! = dr!.getFieldNames().iterator()
                    while it!.hasNext()
                        f$ = it!.next()
                        execute variableNamePrefix!+f$ + "! = dr!.getFieldValue("""+f$+""")"
                        ex$ = ex$ + "," + variableNamePrefix! + f$ + "!"
                    wend
                
                    ex$ = ex$(2)
                endif
                ex$ = "bc!."+invoke$+"("+ex$+")"
                if request!.get("retvarname") <> null() then
                    retvar$ = request!.get("retvarname")
                    ex$ = "var! = " + ex$
                endif
                execute ex$
                if retvar$ <> "" then
                    if var!.getClass().getName() = "com.basiscomponents.db.ResultSet" then
                        rs! = var!
                    else
                        rs! = new ResultSet()
                        if var!.getClass().getName() = "com.basiscomponents.db.DataRow" then
                            rs!.add(var!)
                        else
                            retdr! = new DataRow()
                            class$=var!.getClass().getName()
                            if class$ = "java.util.HashMap" then
                                retdr! = new DataRow(var!)
                            else
                                if class$ = "java.lang.String" or class$ = "java.lang.Boolean" or pos("BBjString"=class$) or pos("BBjNumber"=class$) or pos("BBjVector"=class$) then
                                    retdr!.setFieldValue(retvar$,var!)
                                endif
                            endif
                            rs!.add(retdr!)
                        endif
                    endif

                    response!.put("resultset",rs!)
                else
                    response!.put("resultset","")
                    response!.put("statuscode","204")
                endif
                response!.put("request",str(request!))
                response!.put("BC",bc$)
                response!.put("sel",sel$)
                response!.put("primarykey",filterf$)
            else
                errorOccurred=0
                rs! = new ResultSet()
				b1$=request!.get("body")
				System.out.println(b1$)
				if b1$>"" and b1$(1,1)<>"[" then
					b1$="["+b1$+"]"
				fi
				System.out.println(b1$)
                res! = ResultSet.fromJson(b1$)
                k! = java.util.Arrays.asList(new String(filterf$).split("/"))
                v! = java.util.Arrays.asList(new String(sel$).split("/",-1))
                it! = res!.iterator()
                while it!.hasNext()
                    dr! = it!.next()
                    for i=0 to min(k!.size(),v!.size())-1
                        if !dr!.contains(k!.get(i)) then
                            dr!.setFieldValue(k!.get(i),v!.get(i))
                        endif
                    next i

                    ok=0; dr! = bc!.write(dr!,err=*next); ok=1
                    if !ok then
                        errorOccurred=1
                        response!.put("statuscode","409")
                        response!.put("errorcode",str(err))
                        response!.put("errormsg",errmes(-1))
                        rem throw errmes(-1),err
                    else
                        rs!.addItem(dr!)
                        created! = dr!.getAttribute("CREATED")
                        if !errorOccurred then
                            if created! <> null() and created!.equals("true") then
                                response!.put("statuscode","201")
                            else
                                response!.put("statuscode","200")
                            endif
                        endif
                    endif
                wend

                response!.put("resultset",rs!)
                response!.put("request",str(request!))
                response!.put("BC",bc$)
                response!.put("sel",sel$)
                response!.put("primarykey",filterf$)
                response!.put("single",rs!.size()>1)
            endif
        break

        case "DELETE"
        case "PUT"
            if method$ = "PUT" and cvs(sel$,4) = "IGNOREKEYS" then
                dr! = DataRow.fromJson(request!.get("body"))
            else
                if sel$ = "" or filterf$ = "" then
                    throw "Missing resource ID",999
                endif
                dr! = DataRow.fromJson(request!.get("body"))
                k! = java.util.Arrays.asList(new String(filterf$).split("/"))
                v! = java.util.Arrays.asList(new String(sel$).split("/",-1))
                if v!.size() < k!.size() then
                    throw "Not enough parameters for "+method$,999
                endif
                for i=0 to k!.size()-1
                    if !dr!.contains(k!.get(i)) then
                        dr!.setFieldValue(k!.get(i),v!.get(i))
                    else
                        if dr!.getFieldAsString(k!.get(i)) <> v!.get(i) then
                            throw "Different resource ID in URL path and request body!",999
                        endif
                    endif
                next i
            endif

            rs! = new ResultSet()
            if method$ = "PUT" then
                dr! = bc!.write(dr!,err=*next); ok=1
                if !ok then
                    response!.put("statuscode","409")
                    throw errmes(-1),err
                else
                    created! = dr!.getAttribute("CREATED")
                    if created! <> null() and created!.equals("true") then
                        response!.put("statuscode","201")
                    else
                        response!.put("statuscode","200")
                    endif
                    response!.put("single",1)
                endif
                rs!.addItem(dr!)
            else
                bc!.remove(dr!)
                response!.put("statuscode","204")
            endif

            response!.put("resultset",rs!)
            response!.put("request",str(request!))
            response!.put("BC",bc$)
            response!.put("sel",sel$)
            response!.put("primarykey",filterf$)
        break

        case default
            params! = request!.get("params",err=*next)

            if sel$ = "_meta" then
                rs! = new ResultSet()
                rs!.add(bc!.getAttributesRecord())
                response!.put("resultset",rs!)
                response!.put("BC",bc$)
                response!.put("sel",sel$)
                response!.put("single",1)

                goto send_response
            endif

            filter! = new DataRow()
            response!.put("single",0)
            k! = java.util.Arrays.asList(new String(filterf$).split("/"))
            v! = java.util.Arrays.asList(new String(sel$).split("/",-1))

            rem Add fields from URI
            if sel$ > "" then
                if filterf$>"" then
                    filter! = new DataRow()
                    for i=0 to min(v!.size(),k!.size())-1
                        filter!.setFieldValue(k!.get(i),v!.get(i))
                    next i
                    response!.put("linkfield",filterf$)
                    if k!.size() = v!.size() then
                        response!.put("single",1)
                    endif
                else
                    statuscode=500
                    throw "BC has no filter",999
                fi
            fi

            rem iterate params to fill in [[var]]=value into param=[[var]]
            if params! <> null() and params!.size() >0 then
                it! = params!.keySet().iterator()
                while it!.hasNext()
                    p$=it!.next()
                    v$=params!.get(p$)
                    if len(v$)>4 and v$(1,2)="[[" then
                        x!=params!.get(v$,err=*next)
                        params!.put(p$,str(x!))
                    fi
                wend
            fi

            rem Add parameters
            if params! <> null() and params!.size() >0 then
                if filter! = null() then
                    filter! = new DataRow()
                endif

                af! = ar!
                if servletParams!.containsKey("USE_GET_ALLOWED_FILTER") and servletParams!.get("USE_GET_ALLOWED_FILTER").toString().equals("true") then
                    af! = bc!.getAllowedFilter(err=*next)
                endif

                REM check the field case insensitive
                REM but pass them with the correct casing to the filter
                afnames! = af!.getFieldNames()
                afnames_uc! = new BBjVector()
                it! = afnames!.iterator()
                while it!.hasNext()
                    afnames_uc!.addItem(cvs(str(it!.next()),4))
                wend

                it! = params!.keySet().iterator()
                while it!.hasNext()
                    p$=it!.next()
                    pv$=params!.get(p$)
                    if (p$="_FULLTEXT" OR P$="_SEARCH")
                        filter!.setFieldValue("%SEARCH",pv$)
                    else
                        if (p$(1,1)<>"_" and pv$>"" and (afnames_uc!.contains(p$) OR bc$="DataSourceDataBC")) OR P$(1,1)="%" then
                            rem todo: all BCs should accept filters with fields that are not part of the attributes record
                            rem and still honor all other fields in the filter correctly, instead of giving no result
                            filter!.setFieldValue(afnames!.getItem(afnames_uc!.indexOf(p$)),pv$)
                        fi
                    fi
                wend
            fi
			
            if filter! <> null() then
                bc!.setFilter(filter!)
            fi

			scope!=params!.get("_SCOPE")
			fieldsel!=params!.get("_FIELDSEL",err=*next)

			if fieldsel! <> null() AND scope! <> null() then
				ok=0
				vec! = new BBjVector(java.util.Arrays.asList(fieldsel!.split(",")))
				bc!.setFieldSelection(scope!, vec!,err=*next); ok=1
				if !ok then
					if pos("no match for method"=cvs(errmes(-1),8)) then
						fs! = new DataRow()
						it! = vec!.iterator()
						while it!.hasNext()
							fs!.setFieldValue(it!.next(),"")
						wend
						bc!.setFieldSelection(scope!, fs!)
					else
						throw errmes(-1),err()
					fi
				 fi			
			else
				if fieldsel! <> null()
					ok=0
					vec! = new BBjVector(java.util.Arrays.asList(fieldsel!.split(",")))
					bc!.setFieldSelection(vec!,err=*next); ok=1
					if !ok then
						if pos("no match for method"=cvs(errmes(-1),8)) then
							fs! = new DataRow()
							it! = vec!.iterator()
							while it!.hasNext()
								fs!.setFieldValue(it!.next(),"")
							wend
							bc!.setFieldSelection(fs!)
						else
							throw errmes(-1),err()
						fi
					 fi
				fi
				if scope! <> null() then
					bc!.setScope(str(scope!))
				endif
			fi

            first% = 0
            last% = 0
            limitSearch = 0

            if params! <> null() then
                if params!.containsKey("_PAGE") or params!.containsKey("_PER_PAGE") then
                    page = 1
                    page = num(params!.get("_PAGE"),err=*next)
                    if page < 1 then
                        throw "Invalid value for _PAGE parameter: must be greater than 0",999
                    endif
                    perPage = num(params!.get("_PER_PAGE"),err=*next)
                    if perPage < 1 then
                        throw "Invalid value for _PER_PAGE parameter: must be greater than 0",999
                    endif

                    first% = (int(page)-1)*int(perPage)
                    last% = first%+int(perPage)-1
                    limitSearch = 1
                endif

                if params!.containsKey("_OFFSET") then
                    offset = num(params!.get("_OFFSET"))
                    if offset < 0 then
                        throw "Invalid parameter for _OFFSET parameter: must be greater than or equals 0",999
                    endif
                    limit = 20
                    if params!.containsKey("_LIMIT") then
                        limit = num(params!.get("_LIMIT"))
                    endif
                    if limit < 1 then
                        throw "Invalid parameter for _LIMIT parameter: must be greater than 0",999
                    endif

                    first% = int(offset)
                    last% = first% + int(limit)-1
                    limitSearch = 1
                endif
            endif

            if len(sel$)>8 and sel$(1,8) = "_lookup/" then
                rs! = new ResultSet()

                if filter!<>null() then
                    rs!.add(filter!)
                fi

                field$=sel$(9)
                System.out.println(field$)

                rs! = bc!.retrieveLookup(field$,filter!)

                response!.put("resultset",rs!)
                response!.put("BC",bc$)
                response!.put("single",0)

                goto send_response
            endif

            if limitSearch then
                rs! = bc!.retrieve(first%,last%)
            else
                rs! = bc!.retrieve()
            endif


            if params!.containsKey("_ATTACHMENT") then
                if rs!.size() =1 then
                    rec! = rs!.getItem(0)
                    attachfield$ = params!.get("_ATTACHMENT")

                    rs! = new ResultSet()
                    dr! = new DataRow()
                    filename$=rec!.getFieldAsString(attachfield$)
                    dr!.setFieldValue("FILEDELIVERY",filename$)
                    rs!.addItem(dr!)

                    response!.put("resultset",rs!)
                    response!.put("BC",bc$)
                    response!.put("single",1)
                    response!.put("file",filename$)

                    goto send_response
                else
                    throw "file / record not found",11
                endif
            endif

            response!.put("resultset",rs!)
            response!.put("request",str(request!))
            response!.put("BC",bc$)
            response!.put("sel",sel$)
            response!.put("primarykey",filterf$)
        break
    swend



    send_response:
        usecount=usecount+1
        usecount=usecount+1
        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE",response!)
        responseSemaphore!.release()
        if debug then System.out.println("REST: remote session done "+ses$)
        goto main_loop


    execerr:
        errorcode = err
        errormsg$ = errmes(-1)
        sw! = new java.io.StringWriter()
        pw! = new java.io.PrintWriter(sw!)
        BBjAPI().getLastBBjException().printStackTrace(pw!)
        stacktrace$ = sw!.toString()
        sw!.close()
        pw!.close()

        if debug then
            ch=unt
            open (ch,mode="O_CREATE,O_APPEND",err=notrace)"bridgeerrlog.txt"
            print (ch,err=*next)date(0:"%Yl-%Mz-%Dz %Hz:%mz:%sz")
            print (ch,err=*next)"!ERROR "+str(err)+" "+stacktrace$
            print (ch,err=*next)errmes(-1)
            close (ch,err=*next)
        endif

        notrace:

REM         if errormsg$(1,4)="java" then
REM             errormsg$=errormsg$(pos(":"=errormsg$)+2)
REM         endif


        error_out:
        if statuscode=0
            statuscode=500
        fi

        response! = new HashMap()

        if authenticated>0 then
            response!.put("statuscode",str(statuscode))
            response!.put("errorcode",errorcode)
            response!.put("errormsg",errormsg$)
            rem consider: stack trace only with DEBUG flag in config?
            response!.put("stacktrace",stacktrace$)         
        else
            response!.put("statuscode","401")
            response!.put("errorcode",errorcode)
            response!.put("errormsg",errormsg$)
            rem no stack trace for unauthenticated users
        fi

        BBjAPI().getGlobalNamespace().setValue(ses$+"_RESPONSE",response!)
        responseSemaphore! = BBjAPI().getGlobalNamespace().getValue(ses$+"_RESPONSE_SEM")
        responseSemaphore!.release()

        wait 10; rem FIN_WAIT

        namespace! = BBjAPI().getGlobalNamespace()
        namespace!.removeValue(ses$+"_REQUEST",err=*next)
        namespace!.removeValue(ses$+"_RESPONSE",err=*next)
        namespace!.removeValue(ses$+"_REQUEST_SEM",err=*next)
        namespace!.removeValue(ses$+"_RESPONSE_SEM",err=*next)
        namespace!.removeValue(ses$+"_SERVLET_PARAMETERS",err=*next)

        rem Calling the ON_CLEANUP label to perform possible user defined cleanup operations
        call authpgm$+"::ON_CLEANUP",err=*next       
release

