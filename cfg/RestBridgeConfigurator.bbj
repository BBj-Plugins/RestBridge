use java.io.File
use java.util.HashMap
use java.util.Iterator

class public RestBridgeConfigurator

    field private File pluginDirectory!
    field private BBjAdmin admin!
    field private BBjJettyServerConfiguration serverConfig!

    method public RestBridgeConfigurator(BBjAdmin admin!)
        declare File directory!
        directory! = new File(dsk("") + dir(""))
        #pluginDirectory! = directory!.getParentFile()

        #admin! = admin!

        #serverConfig! = #admin!.getJettyServerConfig()
    methodend

    method public BBjVector getRestBridgeContextConfigurations()
        declare File restBridgeFile!
        declare BBjVector contextNames!
        declare Iterator contextNameIterator!
        declare Iterator bbjspConfigurationIterator!
        declare BBjVector bbxServletConfigurations!
        declare BBjJettyContextConfiguration contextConfiguration!
        declare BBxServlet bbxServletConfiguration!

        declare BBjVector restBridgeConfigurations!
        restBridgeConfigurations! = new BBjVector()

        rem the vector with all context names
        contextNames! = #serverConfig!.getContextNames()

        restBridgeFile! = new File(#pluginDirectory!, "RestBridge.bbj")

        contextNameIterator! = contextNames!.iterator()
        while(contextNameIterator!.hasNext())
            contextName! = str(contextNameIterator!.next())
            contextConfiguration! = #serverConfig!.getCustomContext(contextName!)

            bbxServletConfigurations! = contextConfiguration!.getBBxServlets()
            if(bbxServletConfigurations! <> null() AND !bbxServletConfigurations!.isEmpty()) then

                bbjspConfigurationIterator! = bbxServletConfigurations!.iterator()
                while(bbjspConfigurationIterator!.hasNext())
                    bbxServletConfiguration! = cast(BBxServlet ,bbjspConfigurationIterator!.next())

                    className! = bbxServletConfiguration!.getClassName()
                    sourceName! = bbxServletConfiguration!.getSourceFile()

                    if(className! = "RestBridge" AND sourceName! = restBridgeFile!.getAbsolutePath()) then
                        restBridgeConfigurations!.add(contextName!)
                    endif
                wend
            endif
        wend

        methodret restBridgeConfigurations!
    methodend

    rem /**
    rem  * Returns the path to the default authentication program(authenticate.bbj)
    rem  * 
    rem  * @return the default authentication program path
    rem  */
    method public String getDefaultAuthProgramPath()
        declare File authenticationProgramFile!
        authenticationProgramFile! = new File(#pluginDirectory!, "authenticate.bbj")
        methodret authenticationProgramFile!.getAbsolutePath()
    methodend

    method public BBxServlet getBBxServlet(String contextName!, String mapping!)
        declare BBjJettyContextConfiguration contextConf!
        contextConf! = #serverConfig!.getCustomContext(contextName!)

        if(contextConf! = null()) then
            methodret null()
        endif

        REM Instead of returning a null object if the context doesn't exist,
        REM BBj returns an empty object which throws a NPE when calling any method of the class
        REM this workaround is used to determine if the context exists or not
        status! = contextConf!.getStatus(err=*next)
        if(status! = null()) then
            methodret null()
        endif

        methodret contextConf!.getBBxServlet(mapping!)
    methodend

    rem /**
    rem  * Removes the Rest Bridge configuration from the given context witht he given mapping.
    rem  * 
    rem  * @param context! The context of the Rest Bridge configuration to delete.
    rem  * @param mapping! The mapping of the Rest Bridge configuration to delete.
    rem  */
    method public void removeRestBridgeFromContext(String contextName!, String mapping!)
        declare BBjJettyContextConfiguration contextConfiguration!
        contextConfiguration! = #serverConfig!.getCustomContext(contextName!)

        declare BBxServlet bbxServlet!
        bbxServlet! = contextConfiguration!.getBBxServlet(mapping!)
        if(bbxServlet! = null()) then
            methodret
        endif

        contextConfiguration!.removeBBxServlet(mapping!)
        #serverConfig!.saveConfig()
    methodend

    method public BBjVector getContextNames()
        methodret #serverConfig!.getContextNames()
    methodend

    REM /**
    REM  * Edits the existing Rest Bridge Configuration in the given context with the given initial mapping using the new mapping and the
    REM  * given parameters.
    REM  * 
    REM  * @param contextName! The name of the contet where the Rest Bridge is configured
    REM  * @param initialMapping! The initial mapping of the Rest Bridge configuration to edit
    REM  * @param newMapping! Possible new mapping of the Rest Bridge Configuration
    REM  * @param params! The HashMap with the Rest Bridge Parameters 
    REM  */
    method public void editRestBridgeConfiguration(String contextName!, String mapping!, HashMap params!, String configFilePath!)
        declare BBxServlet conf!
        conf! = #getBBxServlet(contextName!, mapping!)

        if(conf! = null()) then
            methodret
        endif

        conf!.setConfigFile(configFilePath!)

        rem Clearing the parameters
        rem This is actually a work-around for the 
        rem BBj bug causing duplicate parameters to be left over
        ok = 0; conf!.getParameterNames(err=*next); ok = 1
        if ok then
            rem remove the servlet parameters
            while !conf!.getParameterNames().isEmpty()
                conf!.clearParameters()
            wend
        endif

        rem Prior to BBj 19.10, there was a typo in the getParameterNames() method
        rem this code chunk was added to clear the parameters in this old version 
        ok = 0; conf!.getParamaterNames(err=*next); ok = 1
        if ok then
            rem remove the servlet parameters
            while !conf!.getParamaterNames().isEmpty()
                conf!.clearParameters()
            wend
        endif


        declare File adapterProgram!
        adapterProgram! = new File(#pluginDirectory!, "RestBCAdapter.bbj")
        conf!.addParameter("REST_ADAPTERPGM", adapterProgram!.getAbsolutePath())
        conf!.addParameter("REST_ADAPTERTERM", "IO")

        declare Iterator it!
        it! = params!.entrySet().iterator()
        while(it!.hasNext())
            entry! = it!.next()
            if(entry!.getValue() <> "") then
                conf!.addParameter(entry!.getKey(), entry!.getValue())
            endif
        wend

        #serverConfig!.saveConfig()
    methodend

    REM /**
    REM  * Configures the Rest Bridge in the given context with the given mapping and parameters.
    REM  * 
    REM  * @param contextName! The name of the Context where to configure the Rest Bridge
    REM  * @param mapping! The Mapping of the Rest Bridge
    REM  * @param params! The HashMap with the Rest Bridge's parameters
    REM  */
    method public void configureRestBridge(String contextName!, String mapping!, HashMap params!, String configFilePath!)
        declare BBjJettyContextConfiguration contextConfig!

        #serverConfig! = #admin!.getJettyServerConfig()

        if(!#serverConfig!.getContextNames().contains(contextName!)) then
            a = msgbox("Context not found!")
        else
            contextConfig! = #serverConfig!.getCustomContext(contextName!)
        endif

        rem check that the mapping is not already used by another program
        if(contextConfig!.getBBxServletMappings().contains(mapping!)) then
            a = msgbox("Mapping already exists!")
            methodret
        endif

        declare File restBridgeFile!
        restBridgeFile! = new File(#pluginDirectory!, "RestBridge.bbj")

        declare BBxServlet configuration!

        rem ClassName, Mapping, Source, Config(Optional)
        rem http://documentation.basis.com/BASISHelp/WebHelp/gridmethods4/bbjjettycontextconfiguration_addbbjspservlet.htm
        configuration! = contextConfig!.addBBxServlet(mapping!, restBridgeFile!.getAbsolutePath(), "RestBridge", "service")

        configuration!.setConfigFile(configFilePath!)

        declare File adapterProgram!
        adapterProgram! = new File(#pluginDirectory!, "RestBCAdapter.bbj")
        configuration!.addParameter("REST_ADAPTERPGM", adapterProgram!.getAbsolutePath())
        configuration!.addParameter("REST_ADAPTERTERM", "IO")

        declare Iterator it!
        it! = params!.entrySet().iterator()
        while(it!.hasNext())
            entry! = it!.next()
            if(entry!.getValue() <> "") then
                configuration!.addParameter(entry!.getKey(), entry!.getValue())
            endif
        wend

        #serverConfig!.saveConfig()
    methodend


    method public void addContext(String contextName!)

        if(!#serverConfig!.getContextNames().contains(contextName!)) then
            contextConfig! = #serverConfig!.createCustomContext(contextName!)
            contextConfig!.setDocBase("$basis_home/htdocs")
            contextConfig!.addWelcomeFile("index.html")
            contextConfig!.setPath("/" + contextName!)
            #serverConfig!.saveConfig()
         endif

    methodend

    method public void restartContext(String contextName!)
        declare BBjJettyContextController controller!
        controller! = #admin!.getJettyServer().getContext(contextName!)
        if(controller!.isStarted()) then
            controller!.restart()
        else
            controller!.start()
        endif
    methodend

    rem /**
    rem  * Returns a vector with all mappings of the configured Rest Bridges for the given context.
    rem  * This method is required since it can happen that the Rest Bridge was configured with different 
    rem  * mappings multiple time for a same context.
    rem  *
    rem  * @param contextName! The name of the context 
    rem  * @return a vector with all Rest Bridge Configuration mappings for the given context.
    rem  */
    method public BBjVector getRestBridgeMappingsForContext(String contextName!)
        declare Iterator it!
        declare File sourceFile!
        declare BBjVector bbxServlets!
        declare BBjVector restBridgeMappings!
        declare BBxServlet conf!
        declare BBjJettyContextConfiguration contextConfiguration!

        rem get the custom context for the given context name
        contextConfiguration! = #serverConfig!.getCustomContext(contextName!)

        rem the Rest Bridge's source file
        sourceFile! = new File(#pluginDirectory!, "RestBridge.bbj")

        restBridgeMappings! = new BBjVector()

        rem retrieve the BBJSP servlets for the custom context
        bbxServlets! = contextConfiguration!.getBBxServlets()

        it! = bbxServlets!.iterator()
        while(it!.hasNext())
            conf! = cast(BBxServlet, it!.next())
            if(conf!.getClassName().equals("RestBridge") AND conf!.getSourceFile().equals(sourceFile!.getAbsolutePath())) then
                restBridgeMappings!.addItem(conf!.getMapping())
            endif
        wend

        methodret restBridgeMappings!
    methodend

classend